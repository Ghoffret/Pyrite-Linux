#!/bin/bash

#############################################################################
#                                                                           #
#                      Pyrite Configuration Manager                        #
#                                                                           #
#     Hardware and system configuration utility                            #
#                                                                           #
#############################################################################

set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Configuration directories
readonly CONFIG_DIR="/etc/pyrite"
readonly USER_CONFIG_DIR="$HOME/.config/pyrite"

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

confirm() {
    local prompt="$1"
    local default="${2:-n}"
    local response
    
    if [[ "$default" == "y" ]]; then
        read -r -p "$prompt [Y/n]: " response
        response=${response:-y}
    else
        read -r -p "$prompt [y/N]: " response
        response=${response:-n}
    fi
    
    [[ "$response" =~ ^[Yy]$ ]]
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This command must be run as root"
        exit 1
    fi
}

detect_hardware() {
    print_info "Detecting system hardware..."
    
    echo "CPU Information:"
    echo "==============="
    grep "model name" /proc/cpuinfo | head -1 | cut -d: -f2 | xargs
    echo "Cores: $(nproc)"
    echo
    
    echo "Memory Information:"
    echo "=================="
    local total_mem_kb
    total_mem_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    local total_mem_mb=$((total_mem_kb / 1024))
    echo "Total RAM: ${total_mem_mb}MB"
    echo
    
    echo "Storage Information:"
    echo "==================="
    lsblk -d -o NAME,SIZE,MODEL | grep -v "loop"
    echo
    
    echo "Graphics Information:"
    echo "===================="
    lspci | grep -i vga
    echo
    
    echo "Network Information:"
    echo "==================="
    lspci | grep -i network
    ip link show | grep -E "^[0-9]+:" | cut -d: -f2 | xargs
    echo
    
    echo "Audio Information:"
    echo "================="
    lspci | grep -i audio
    echo
}

configure_graphics() {
    print_info "Graphics configuration options:"
    echo
    echo "1) Auto-detect and configure graphics drivers"
    echo "2) Install NVIDIA proprietary drivers"
    echo "3) Install AMD open-source drivers"
    echo "4) Install Intel drivers"
    echo "5) Return to main menu"
    echo
    
    read -r -p "Select option [1-5]: " choice
    
    case "$choice" in
        1)
            auto_configure_graphics
            ;;
        2)
            install_nvidia_drivers
            ;;
        3)
            install_amd_drivers
            ;;
        4)
            install_intel_drivers
            ;;
        5)
            return
            ;;
        *)
            print_warning "Invalid selection"
            ;;
    esac
}

auto_configure_graphics() {
    print_info "Auto-detecting graphics hardware..."
    
    if lspci | grep -i nvidia &>/dev/null; then
        print_success "NVIDIA GPU detected"
        if confirm "Install NVIDIA drivers?"; then
            install_nvidia_drivers
        fi
    fi
    
    if lspci | grep -i amd | grep -i vga &>/dev/null; then
        print_success "AMD GPU detected"
        if confirm "Install AMD drivers?"; then
            install_amd_drivers
        fi
    fi
    
    if lspci | grep -i intel | grep -i vga &>/dev/null; then
        print_success "Intel GPU detected"
        if confirm "Install Intel drivers?"; then
            install_intel_drivers
        fi
    fi
}

install_nvidia_drivers() {
    check_root
    print_info "Installing NVIDIA drivers..."
    
    local packages=("nvidia" "nvidia-utils" "nvidia-settings")
    
    if confirm "Install NVIDIA drivers and utilities?"; then
        pacman -S --needed "${packages[@]}"
        print_success "NVIDIA drivers installed"
        print_warning "Reboot required for changes to take effect"
    fi
}

install_amd_drivers() {
    check_root
    print_info "Installing AMD drivers..."
    
    local packages=("mesa" "vulkan-radeon" "libva-mesa-driver" "mesa-vdpau")
    
    if confirm "Install AMD open-source drivers?"; then
        pacman -S --needed "${packages[@]}"
        print_success "AMD drivers installed"
    fi
}

install_intel_drivers() {
    check_root
    print_info "Installing Intel drivers..."
    
    local packages=("mesa" "vulkan-intel" "intel-media-driver" "libva-intel-driver")
    
    if confirm "Install Intel drivers?"; then
        pacman -S --needed "${packages[@]}"
        print_success "Intel drivers installed"
    fi
}

configure_audio() {
    print_info "Audio configuration options:"
    echo
    echo "1) Install PipeWire (recommended)"
    echo "2) Install PulseAudio"
    echo "3) Configure audio devices"
    echo "4) Test audio output"
    echo "5) Return to main menu"
    echo
    
    read -r -p "Select option [1-5]: " choice
    
    case "$choice" in
        1)
            install_pipewire
            ;;
        2)
            install_pulseaudio
            ;;
        3)
            configure_audio_devices
            ;;
        4)
            test_audio
            ;;
        5)
            return
            ;;
        *)
            print_warning "Invalid selection"
            ;;
    esac
}

install_pipewire() {
    check_root
    print_info "Installing PipeWire audio system..."
    
    local packages=("pipewire" "pipewire-alsa" "pipewire-pulse" "pipewire-jack" "wireplumber")
    
    if confirm "Install PipeWire audio system?"; then
        pacman -S --needed "${packages[@]}"
        
        # Enable PipeWire services for user
        local user
        user=$(logname 2>/dev/null || echo "$SUDO_USER")
        if [[ -n "$user" ]]; then
            sudo -u "$user" systemctl --user enable --now pipewire pipewire-pulse wireplumber
            print_success "PipeWire installed and enabled for user: $user"
        else
            print_success "PipeWire installed (manual user setup required)"
        fi
    fi
}

install_pulseaudio() {
    check_root
    print_info "Installing PulseAudio..."
    
    local packages=("pulseaudio" "pulseaudio-alsa" "pavucontrol")
    
    if confirm "Install PulseAudio?"; then
        pacman -S --needed "${packages[@]}"
        print_success "PulseAudio installed"
    fi
}

configure_audio_devices() {
    print_info "Audio devices:"
    if command -v pactl &>/dev/null; then
        pactl list short sinks
        pactl list short sources
    else
        print_warning "PulseAudio/PipeWire not available for device listing"
    fi
}

test_audio() {
    print_info "Testing audio output..."
    
    if command -v speaker-test &>/dev/null; then
        print_info "Running speaker test (press Ctrl+C to stop)..."
        speaker-test -t sine -f 1000 -l 3
    else
        print_warning "speaker-test not available"
        
        if command -v paplay &>/dev/null && [[ -f /usr/share/sounds/alsa/Front_Left.wav ]]; then
            print_info "Playing test sound..."
            paplay /usr/share/sounds/alsa/Front_Left.wav
        else
            print_warning "No audio test available"
        fi
    fi
}

configure_network() {
    print_info "Network configuration options:"
    echo
    echo "1) Show network interfaces"
    echo "2) Configure WiFi"
    echo "3) Configure Ethernet"
    echo "4) Show network status"
    echo "5) Restart NetworkManager"
    echo "6) Return to main menu"
    echo
    
    read -r -p "Select option [1-6]: " choice
    
    case "$choice" in
        1)
            show_network_interfaces
            ;;
        2)
            configure_wifi
            ;;
        3)
            configure_ethernet
            ;;
        4)
            show_network_status
            ;;
        5)
            restart_networkmanager
            ;;
        6)
            return
            ;;
        *)
            print_warning "Invalid selection"
            ;;
    esac
}

show_network_interfaces() {
    print_info "Network interfaces:"
    ip link show
    echo
    print_info "IP addresses:"
    ip addr show
}

configure_wifi() {
    print_info "Available WiFi networks:"
    nmcli device wifi list
    echo
    
    read -r -p "Enter SSID to connect to: " ssid
    if [[ -n "$ssid" ]]; then
        read -r -s -p "Enter password: " password
        echo
        
        if nmcli device wifi connect "$ssid" password "$password"; then
            print_success "Connected to WiFi network: $ssid"
        else
            print_error "Failed to connect to WiFi network"
        fi
    fi
}

configure_ethernet() {
    print_info "Ethernet configuration:"
    nmcli connection show
    
    print_info "Ethernet connections will be automatically configured via DHCP"
    print_info "For static IP configuration, use: nmcli connection modify"
}

show_network_status() {
    print_info "Network status:"
    nmcli general status
    echo
    print_info "Active connections:"
    nmcli connection show --active
}

restart_networkmanager() {
    check_root
    print_info "Restarting NetworkManager..."
    
    if systemctl restart NetworkManager; then
        print_success "NetworkManager restarted successfully"
    else
        print_error "Failed to restart NetworkManager"
    fi
}

configure_services() {
    print_info "System services configuration:"
    echo
    echo "1) Show all services"
    echo "2) Show enabled services"
    echo "3) Enable/disable services"
    echo "4) Configure firewall"
    echo "5) Configure SSH"
    echo "6) Return to main menu"
    echo
    
    read -r -p "Select option [1-6]: " choice
    
    case "$choice" in
        1)
            systemctl list-units --type=service
            ;;
        2)
            systemctl list-unit-files --state=enabled --type=service
            ;;
        3)
            configure_service_state
            ;;
        4)
            configure_firewall
            ;;
        5)
            configure_ssh
            ;;
        6)
            return
            ;;
        *)
            print_warning "Invalid selection"
            ;;
    esac
}

configure_service_state() {
    read -r -p "Enter service name: " service
    if [[ -n "$service" ]]; then
        print_info "Service status:"
        systemctl status "$service" || true
        echo
        
        if confirm "Enable this service?"; then
            systemctl enable "$service"
            print_success "Service $service enabled"
        fi
        
        if confirm "Start this service now?"; then
            systemctl start "$service"
            print_success "Service $service started"
        fi
    fi
}

configure_firewall() {
    check_root
    print_info "Firewall configuration:"
    
    if ! command -v ufw &>/dev/null; then
        if confirm "UFW firewall not installed. Install it?"; then
            pacman -S ufw
        else
            return
        fi
    fi
    
    print_info "Current firewall status:"
    ufw status verbose
    echo
    
    if confirm "Enable firewall?"; then
        ufw --force enable
        print_success "Firewall enabled"
    fi
}

configure_ssh() {
    check_root
    print_info "SSH configuration:"
    
    if ! systemctl is-enabled sshd &>/dev/null; then
        if confirm "SSH is not enabled. Enable SSH server?"; then
            systemctl enable sshd
            systemctl start sshd
            print_success "SSH server enabled and started"
        fi
    else
        print_info "SSH server is already enabled"
    fi
    
    print_info "SSH configuration file: /etc/ssh/sshd_config"
    print_info "Current SSH status:"
    systemctl status sshd
}

show_system_info() {
    echo -e "${BLUE}"
    echo "████████████████████████████████████████████████████████████████"
    echo "██                                                            ██"
    echo "██                  Pyrite System Information                 ██"
    echo "██                                                            ██"
    echo "████████████████████████████████████████████████████████████████"
    echo -e "${NC}"
    echo
    
    echo "System: $(uname -s) $(uname -r)"
    echo "Architecture: $(uname -m)"
    echo "Hostname: $(hostname)"
    echo "Uptime: $(uptime -p)"
    echo "Load average: $(uptime | awk -F'load average:' '{print $2}')"
    echo
    
    detect_hardware
}

show_main_menu() {
    echo -e "${BLUE}"
    echo "████████████████████████████████████████████████████████████████"
    echo "██                                                            ██"
    echo "██                Pyrite Configuration Manager                ██"
    echo "██                                                            ██"
    echo "████████████████████████████████████████████████████████████████"
    echo -e "${NC}"
    echo
    
    echo "Configuration Options:"
    echo "====================="
    echo
    echo "1) System Information"
    echo "2) Hardware Detection"
    echo "3) Graphics Configuration"
    echo "4) Audio Configuration"
    echo "5) Network Configuration"
    echo "6) Services Configuration"
    echo "7) Exit"
    echo
}

show_help() {
    echo "Pyrite Configuration Manager - Hardware and system configuration"
    echo
    echo "Usage: pyrite-config [OPTION]"
    echo
    echo "Options:"
    echo "  -h, --help        Show this help message"
    echo "  -i, --info        Show system information"
    echo "  -d, --detect      Run hardware detection"
    echo "  -g, --graphics    Configure graphics drivers"
    echo "  -a, --audio       Configure audio system"
    echo "  -n, --network     Configure network settings"
    echo "  -s, --services    Configure system services"
    echo
    echo "Examples:"
    echo "  pyrite-config                 # Interactive mode"
    echo "  pyrite-config -i              # Show system info"
    echo "  pyrite-config -d              # Detect hardware"
}

main() {
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -i|--info)
            show_system_info
            exit 0
            ;;
        -d|--detect)
            detect_hardware
            exit 0
            ;;
        -g|--graphics)
            configure_graphics
            exit 0
            ;;
        -a|--audio)
            configure_audio
            exit 0
            ;;
        -n|--network)
            configure_network
            exit 0
            ;;
        -s|--services)
            configure_services
            exit 0
            ;;
        "")
            # Interactive mode
            while true; do
                clear
                show_main_menu
                
                read -r -p "Select option [1-7]: " choice
                
                case "$choice" in
                    1)
                        clear
                        show_system_info
                        read -r -p "Press Enter to continue..."
                        ;;
                    2)
                        clear
                        detect_hardware
                        read -r -p "Press Enter to continue..."
                        ;;
                    3)
                        clear
                        configure_graphics
                        read -r -p "Press Enter to continue..."
                        ;;
                    4)
                        clear
                        configure_audio
                        read -r -p "Press Enter to continue..."
                        ;;
                    5)
                        clear
                        configure_network
                        read -r -p "Press Enter to continue..."
                        ;;
                    6)
                        clear
                        configure_services
                        read -r -p "Press Enter to continue..."
                        ;;
                    7)
                        print_info "Exiting Pyrite Configuration Manager"
                        exit 0
                        ;;
                    *)
                        print_warning "Invalid selection"
                        sleep 1
                        ;;
                esac
            done
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
}

# Script entry point
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi